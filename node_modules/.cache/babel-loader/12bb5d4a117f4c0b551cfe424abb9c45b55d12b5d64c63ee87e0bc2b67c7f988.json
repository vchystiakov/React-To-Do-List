{"ast":null,"code":"var _jsxFileName = \"C:\\\\FullStackLearning\\\\FullStackProjects\\\\todo-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//import React for Creating components and hooks\nimport React, { useState, useEffect } from \"react\";\n//import list icon\nimport listSvg from \"./assets/img/list.svg\";\n//import all components\nimport { List, AddListButton, Tasks } from \"./components/index.jsx\";\n//import libary for making requests to json server\nimport axios from \"axios\";\n//import library modules for using routes in app\nimport { Route, useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //useState hook for changing state of lists array\n  const [lists, setLists] = useState(null);\n  //useState hook for changing state of colors\n  const [colors, setColors] = useState(null);\n  //useState hook for changing state of active list(displays it's tasks)\n  const [activeItem, setActiveItem] = useState(null);\n  //useHistory hook for managing current state of browser history\n  let history = useHistory();\n\n  // useEffect hook checks if app component was rendered and in that case make get request\n  useEffect(() => {\n    //get request to json server - takes data from it's and sets new state of lists\n    axios.get(\"http://localhost:3001/lists?_expand=color&_embed=tasks\").then(({\n      data\n    }) => {\n      setLists(data);\n    });\n    axios.get(\" http://localhost:3001/colors\").then(({\n      data\n    }) => {\n      setColors(data);\n    });\n  }, []);\n\n  //function that adds created list to array of all lists\n  const onAddList = obj => {\n    //using spread operator in order to add created list to old array and create newArray\n    const newList = [...lists, obj];\n    setLists(newList);\n  };\n\n  //function that creates new task in array of tasks by clicking on Button\n  const onAddTask = (listId, taskObj) => {\n    //generates new array of tasks\n    const newList = lists.map(item => {\n      if (item.id === listId) {\n        item.tasks = [...item.tasks, taskObj];\n      }\n      return item;\n    });\n    //sets new State of list with updated tasks array\n    setLists(newList);\n  };\n\n  // function that edits task\n  const onEditTask = (listId, taskObj) => {\n    const newTaskText = window.prompt(\"Task Text\", taskObj.text);\n    if (!newTaskText) {\n      return;\n    }\n    const newList = lists.map(list => {\n      if (list.id === listId) {\n        list.tasks = list.tasks.map(task => {\n          if (task.id === taskObj.id) {\n            task.text = newTaskText;\n          }\n          return task;\n        });\n      }\n      return list;\n    });\n    setLists(newList);\n    axios.patch(\"http://localhost:3001/tasks/\" + taskObj.id, {\n      text: newTaskText\n    }).catch(() => {\n      alert(\"Can't update task\");\n    });\n  };\n\n  //function that removes task\n  const onRemoveTask = (listId, taskId) => {\n    if (window.confirm(\"Do you really want to delete task?\")) {\n      const newList = lists.map(item => {\n        if (item.id === listId) {\n          item.tasks = item.tasks.filter(task => task.id !== taskId);\n        }\n        return item;\n      });\n      setLists(newList);\n      axios.delete(\"http://localhost:3001/tasks/\" + taskId).catch(() => {\n        alert(\"Cant delete task!\");\n      });\n    }\n  };\n\n  //callback function - edits title of item\n  const onEditListTitle = (id, title) => {\n    const newList = lists.map(item => {\n      if (item.id === id) {\n        item.name = title;\n      }\n      return item;\n    });\n    setLists(newList);\n  };\n\n  //useEffect reacts on changes in history dependency after rendering application and sets active state on list item by it's id by clicking on it\n  useEffect(() => {\n    return history.listen(location => {\n      //finds listId in adress pathname\n      const listId = history.location.pathname.split(\"lists/\")[1];\n      if (lists) {\n        //finds list where list.id = listId\n        const list = lists.find(list => list.id === Number(listId));\n        //sets this list as list with active state\n        setActiveItem(list);\n      }\n    });\n  }, [lists, history]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo__sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(List\n      // By clicking on item ads route which transfers to page with all lists\n      , {\n        onClickItem: list => {\n          history.push(`/`);\n        },\n        items: [{\n          active: true,\n          icon: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: listSvg,\n            alt: \"list icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this),\n          name: \"List of Tasks\"\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), lists ? /*#__PURE__*/_jsxDEV(List\n      // array of lists\n      , {\n        items: lists\n        //function that removes lists\n        ,\n        onRemove: id => {\n          //filters array of lists and throws away list that was removed\n          const newLists = lists.filter(item => item.id !== id);\n          //sets this array as new state of lists\n          setLists(newLists);\n        }\n        //function that makes list item active\n        ,\n        onClickItem: list => {\n          history.push(`/lists/${list.id}`);\n        } //ads to routing history new route and transfers to it\n        //active state of item\n        ,\n        activeItem: activeItem,\n        isRemovable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this) : \"Loading...\", /*#__PURE__*/_jsxDEV(AddListButton, {\n        onAdd: onAddList,\n        colors: colors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo__tasks\",\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: lists && lists.map(list => /*#__PURE__*/_jsxDEV(Tasks, {\n          list: list,\n          onAddTask: onAddTask,\n          onEditTitle: onEditListTitle,\n          withoutEmpty: true\n        }, list.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/lists/:id\",\n        children: lists && activeItem && /*#__PURE__*/_jsxDEV(Tasks, {\n          list: activeItem,\n          onAddTask: onAddTask,\n          onEditTitle: onEditListTitle,\n          onRemoveTask: onRemoveTask,\n          onEditTask: onEditTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oFXVPIno0o1SPAo4ITWiIXyKfws=\", false, function () {\n  return [useHistory];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","listSvg","List","AddListButton","Tasks","axios","Route","useHistory","jsxDEV","_jsxDEV","App","_s","lists","setLists","colors","setColors","activeItem","setActiveItem","history","get","then","data","onAddList","obj","newList","onAddTask","listId","taskObj","map","item","id","tasks","onEditTask","newTaskText","window","prompt","text","list","task","patch","catch","alert","onRemoveTask","taskId","confirm","filter","delete","onEditListTitle","title","name","listen","location","pathname","split","find","Number","className","children","onClickItem","push","items","active","icon","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onRemove","newLists","isRemovable","onAdd","exact","path","onEditTitle","withoutEmpty","_c","$RefreshReg$"],"sources":["C:/FullStackLearning/FullStackProjects/todo-app/src/App.js"],"sourcesContent":["//import React for Creating components and hooks\nimport React, { useState, useEffect } from \"react\";\n//import list icon\nimport listSvg from \"./assets/img/list.svg\";\n//import all components\nimport { List, AddListButton, Tasks } from \"./components/index.jsx\";\n//import libary for making requests to json server\nimport axios from \"axios\";\n//import library modules for using routes in app\nimport { Route, useHistory } from \"react-router-dom\";\n\nfunction App() {\n  //useState hook for changing state of lists array\n  const [lists, setLists] = useState(null);\n  //useState hook for changing state of colors\n  const [colors, setColors] = useState(null);\n  //useState hook for changing state of active list(displays it's tasks)\n  const [activeItem, setActiveItem] = useState(null);\n  //useHistory hook for managing current state of browser history\n  let history = useHistory();\n\n  // useEffect hook checks if app component was rendered and in that case make get request\n  useEffect(() => {\n    //get request to json server - takes data from it's and sets new state of lists\n    axios\n      .get(\"http://localhost:3001/lists?_expand=color&_embed=tasks\")\n      .then(({ data }) => {\n        setLists(data);\n      });\n    axios.get(\" http://localhost:3001/colors\").then(({ data }) => {\n      setColors(data);\n    });\n  }, []);\n\n  //function that adds created list to array of all lists\n  const onAddList = (obj) => {\n    //using spread operator in order to add created list to old array and create newArray\n    const newList = [...lists, obj];\n    setLists(newList);\n  };\n\n  //function that creates new task in array of tasks by clicking on Button\n  const onAddTask = (listId, taskObj) => {\n    //generates new array of tasks\n    const newList = lists.map((item) => {\n      if (item.id === listId) {\n        item.tasks = [...item.tasks, taskObj];\n      }\n      return item;\n    });\n    //sets new State of list with updated tasks array\n    setLists(newList);\n  };\n\n  // function that edits task\n  const onEditTask = (listId, taskObj) => {\n    const newTaskText = window.prompt(\"Task Text\", taskObj.text);\n\n    if (!newTaskText) {\n      return;\n    }\n\n    const newList = lists.map((list) => {\n      if (list.id === listId) {\n        list.tasks = list.tasks.map((task) => {\n          if (task.id === taskObj.id) {\n            task.text = newTaskText;\n          }\n          return task;\n        });\n      }\n      return list;\n    });\n    setLists(newList);\n    axios\n      .patch(\"http://localhost:3001/tasks/\" + taskObj.id, {\n        text: newTaskText,\n      })\n      .catch(() => {\n        alert(\"Can't update task\");\n      });\n  };\n\n  //function that removes task\n  const onRemoveTask = (listId, taskId) => {\n    if (window.confirm(\"Do you really want to delete task?\")) {\n      const newList = lists.map((item) => {\n        if (item.id === listId) {\n          item.tasks = item.tasks.filter((task) => task.id !== taskId);\n        }\n        return item;\n      });\n      setLists(newList);\n      axios.delete(\"http://localhost:3001/tasks/\" + taskId).catch(() => {\n        alert(\"Cant delete task!\");\n      });\n    }\n  };\n\n  //callback function - edits title of item\n  const onEditListTitle = (id, title) => {\n    const newList = lists.map((item) => {\n      if (item.id === id) {\n        item.name = title;\n      }\n      return item;\n    });\n    setLists(newList);\n  };\n\n  //useEffect reacts on changes in history dependency after rendering application and sets active state on list item by it's id by clicking on it\n  useEffect(() => {\n    return history.listen((location) => {\n      //finds listId in adress pathname\n      const listId = history.location.pathname.split(\"lists/\")[1];\n      if (lists) {\n        //finds list where list.id = listId\n        const list = lists.find((list) => list.id === Number(listId));\n        //sets this list as list with active state\n        setActiveItem(list);\n      }\n    });\n  }, [lists, history]);\n  return (\n    <div className=\"todo\">\n      {/* sidebar block */}\n      <div className=\"todo__sidebar\">\n        <List\n          // By clicking on item ads route which transfers to page with all lists\n          onClickItem={(list) => {\n            history.push(`/`);\n          }}\n          items={[\n            {\n              active: true,\n              icon: <img src={listSvg} alt=\"list icon\" />,\n              name: \"List of Tasks\",\n            },\n          ]}\n        />\n        {lists ? (\n          <List\n            // array of lists\n            items={lists}\n            //function that removes lists\n            onRemove={(id) => {\n              //filters array of lists and throws away list that was removed\n              const newLists = lists.filter((item) => item.id !== id);\n              //sets this array as new state of lists\n              setLists(newLists);\n            }}\n            //function that makes list item active\n            onClickItem={(list) => {\n              history.push(`/lists/${list.id}`);\n            }} //ads to routing history new route and transfers to it\n            //active state of item\n            activeItem={activeItem}\n            isRemovable\n          />\n        ) : (\n          \"Loading...\"\n        )}\n        <AddListButton onAdd={onAddList} colors={colors} />\n      </div>\n      {/* tasks block - displays tasks of active item of lists*/}\n      {/* Route that transfers to page with all lists of tasks */}\n      <div className=\"todo__tasks\">\n        <Route exact path=\"/\">\n          {lists &&\n            lists.map((list) => (\n              <Tasks\n                key={list.id}\n                list={list}\n                onAddTask={onAddTask}\n                onEditTitle={onEditListTitle}\n                withoutEmpty\n              />\n            ))}\n        </Route>\n        {/* Route that transfers to the page with specific id of list */}\n        <Route path=\"/lists/:id\">\n          {lists && activeItem && (\n            <Tasks\n              list={activeItem}\n              onAddTask={onAddTask}\n              onEditTitle={onEditListTitle}\n              onRemoveTask={onRemoveTask}\n              onEditTask={onEditTask}\n            />\n          )}\n        </Route>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}